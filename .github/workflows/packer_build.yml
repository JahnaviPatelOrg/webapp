name: packer_build

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
    id-token: write
    contents: read

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}


    strategy:
      matrix:
        python-version: [ 3.13 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Start mysql
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};" -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }}


      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev python3-pip python3-venv build-essential libjpeg-dev zlib1g-dev libpng-dev libfreetype6-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ./webapp


      - name: Run Migrations and Tests
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_NAME: ${{ secrets.DB_NAME }}
          DATABASE_USER: ${{ secrets.DB_USER }}
          DATABASE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DB_HOST }}
          DATABASE_PORT: ${{ secrets.DB_PORT }}
        run: |
          python manage.py makemigrations
          python manage.py migrate
          python manage.py test
        working-directory: ./webapp

      - name: zip files
        run: zip -r webapp.zip . -x "*.git*" -x ".github/*" -x "README.md"

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: webapp-artifact
          path: ./webapp.zip

  packer_buid:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AMI_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AMI_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup

      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.9
        with:
          name: webapp-artifact
          path: ./

      - name: Initialize Packer
        run: packer init setup.pkr.hcl
        working-directory: ./webapp/packer_setup

      - name: Build Packer image
        env:
            Source_AMI: ${{ secrets.AWS_SOURCE_AMI }}
            AWS_Account_IDs: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
            AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
            GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          packer build \
            -var "source_ami=${Source_AMI}" \
            -var "account_ids=[\"${AWS_Account_IDs}\",\"${AWS_DEMO_ACCOUNT_ID}\"]" \
            -var "google_project_id=${GOOGLE_PROJECT_ID}" \
            -var "db_host=${DB_HOST}" \
            -var "db_user=${DB_USER}" \
            -var "db_password=${DB_PASSWORD}" \
            -var "db_name=${DB_NAME}" \
            -var "secret_key=${DJANGO_SECRET_KEY}" \
          setup.pkr.hcl
        working-directory: ./webapp/packer_setup
