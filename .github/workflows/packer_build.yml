name: packer_build

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    strategy:
      matrix:
        python-version: [ 3.13 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Start mysql
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_NAME }};" -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ./webapp

      - name: Run Migrations and Tests
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_NAME: ${{ secrets.DB_NAME }}
          DATABASE_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DB_HOST }}
          DATABASE_PORT: ${{ secrets.DB_PORT }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AMI_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AMI_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
        run: |
          python manage.py makemigrations
          python manage.py migrate
          python manage.py test
        working-directory: ./webapp

      - name: zip files
        run: zip -r webapp.zip . -x "*.git*" -x ".github/*" -x "README.md"

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: webapp-artifact
          path: ./webapp.zip

  packer_buid:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AMI_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AMI_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup

      - name: Download a Build Artifact
        uses: actions/download-artifact@v4.1.9
        with:
          name: webapp-artifact
          path: ./

      - name: Initialize Packer
        run: packer init setup.pkr.hcl
        working-directory: ./webapp/packer_setup

      - name: Build Packer image (only if using real AMI)
        env:
          Source_AMI: ${{ secrets.AWS_SOURCE_AMI }}
          AWS_Account_IDs: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          if [[ "${{ secrets.USE_TEST_AMI }}" != "true" ]]; then
          echo "Running real AMI build with packer..."
          packer build \
          -var "source_ami=${{ secrets.AWS_SOURCE_AMI }}" \
          -var "account_ids=[\"${{ secrets.AWS_DEMO_ACCOUNT_ID }}\"]" \
          -var "google_project_id=${{ secrets.GOOGLE_PROJECT_ID }}" \
          -var "db_host=${{ secrets.DB_HOST }}" \
          -var "db_user=${{ secrets.DB_USER }}" \
          -var "db_password=${{ secrets.DB_PASSWORD }}" \
          -var "db_name=${{ secrets.DB_NAME }}" \
          -var "secret_key=${{ secrets.DJANGO_SECRET_KEY }}" \
          setup.pkr.hcl
          else
          echo "Skipping AMI build â€” using test AMI"
          fi
        working-directory: ./webapp/packer_setup

      - name: Determine AMI ID (test or real)
        run: |
          if [[ "${{ secrets.USE_TEST_AMI }}" == "true" ]]; then
            echo "Using test AMI from secrets"
            echo "AMI_ID=${{ secrets.TEST_AMI_ID }}" >> $GITHUB_ENV
          else
            AMI_ID=$(jq -r '.builds[-1].artifact_id' ./webapp/packer_setup/packer-manifest.json | cut -d':' -f2)
            echo "Using real AMI from packer manifest: $AMI_ID"
            echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          fi

      - name: Configure AWS CLI for Demo Account
        run: |
          aws configure set aws_access_key_id ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: Create new Launch Template version
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-name ${{ secrets.LAUNCH_TEMPLATE_NAME }} \
            --source-version \$Latest \
            --version-description "Updated with latest AMI" \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}"

      - name: Start Instance Refresh
        id: refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
            --strategy Rolling \
            --query 'InstanceRefreshId' \
            --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV
          echo "::set-output name=refresh_id::$REFRESH_ID"

      - name: Wait for Instance Refresh to complete
        run: |
          for i in {1..60}; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} \
              --instance-refresh-ids ${{ steps.refresh.outputs.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh completed successfully."
              exit 0
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance refresh failed or cancelled."
              exit 1
            fi
            sleep 15
          done
          echo "Timeout waiting for instance refresh."
          exit 1
